# ats_socket.py
import json
import os
import paho.mqtt.client as mqtt
from threading import Thread
from pymodbus.client.sync import ModbusTcpClient
from pymodbus.payload import BinaryPayloadDecoder
from pymodbus.constants import Endian
import time
from datetime import datetime
from application.controllers.ats_logger import log_ats_data

# Mapping t·ª´ c√°c kh√≥a d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c sang id trong giao di·ªán ATS
FIELD_MAP = {
    'r0': 'uab1',
    'r1': 'ubc1',
    'r2': 'uca1',
    'r3': 'ua1',
    'r4': 'ub1',
    'r5': 'uc1',
    'r6': 'phaA1',
    'r7': 'phaB1',
    'r8': 'phaC1',
    'r9': 'freq1',
    'r10': 'uab2',
    'r11': 'ubc2',
    'r12': 'uca2',
    'r13': 'ua2',
    'r14': 'ub2',
    'r15': 'uc2',
    'r16': 'phaA2',
    'r17': 'phaB2',
    'r18': 'phaC2',
    'r19': 'freq2',
    'r20': 'ia',
    'r21': 'ib',
    'r22': 'ic',
    'r23': 'status_close_a',
    'r24': 'status_close_b',
    'r25': 'status_open',
    'r26': 'auto_mode'
}

def map_generator_fields(gen_data: dict) -> dict:
    """Convert raw generator data using FIELD_MAP."""
    return {FIELD_MAP.get(k, k): v for k, v in gen_data.items()}


# Kh·ªüi t·∫°o bi·∫øn socketio, s·∫Ω ƒë∆∞·ª£c truy·ªÅn t·ª´ file ch√≠nh (app.py)
socketio = None

# C·∫•u h√¨nh MQTT
# Broker v√† c·ªïng c√≥ th·ªÉ c·∫•u h√¨nh qua bi·∫øn m√¥i tr∆∞·ªùng
MQTT_BROKER = os.getenv("MQTT_BROKER_ADDRESS_ATS", "localhost")  # ho·∫∑c IP nh∆∞ "10.50.41.15"
MQTT_PORT = int(os.getenv("MQTT_PORT_ATS", 1883))
MQTT_TOPIC = "ats/data"

# H√†m callback khi nh·∫≠n d·ªØ li·ªáu t·ª´ MQTT
def on_message(client, userdata, msg):
    try:
        topic = msg.topic
        payload = msg.payload.decode('utf-8')
        data = json.loads(payload)
        print(f"[MQTT] Nh·∫≠n t·ª´ {topic}: {data}")

        if topic == "ats/data":
            # Chuy·ªÉn ƒë·ªïi t√™n tr∆∞·ªùng theo b·∫£ng √°nh x·∫°
            mapped = {}
            for gen_key in ["gen1", "gen2"]:
                if gen_key in data:
                    mapped[gen_key] = map_generator_fields(data[gen_key])

            # üî¥ Ghi d·ªØ li·ªáu ƒëi·ªán nƒÉng v√†o InfluxDB
            log_ats_data(mapped)

            # G·ª≠i d·ªØ li·ªáu ƒë·∫øn client qua Socket.IO
            if socketio:
                print("[SOCKET.IO] G·ª≠i d·ªØ li·ªáu ATS qua Socket.IO")
                socketio.emit("ats_data", mapped)

        elif topic == "ats/water":
            # üëâ G·ª≠i d·ªØ li·ªáu n∆∞·ªõc t·ªõi frontend
            if socketio is not None:
                print("[SOCKET.IO] G·ª≠i d·ªØ li·ªáu N∆Ø·ªöC:", data)
                socketio.emit("water_data", data)
            else:
                print("‚ö†Ô∏è socketio ch∆∞a s·∫µn s√†ng, b·ªè qua g·ª≠i d·ªØ li·ªáu n∆∞·ªõc")


    except Exception as e:
        print("[MQTT] L·ªói:", e)

def read_real_from_offset(client, offset_byte):
    address = offset_byte // 2
    result = client.read_holding_registers(address, 2, unit=1)
    if not result.isError():
        decoder = BinaryPayloadDecoder.fromRegisters(result.registers, byteorder=Endian.Big, wordorder=Endian.Big)
        return decoder.decode_32bit_float()
    else:
        print(f"‚ùå L·ªói ƒë·ªçc t·∫°i offset {offset_byte}")
        return None

def read_modbus_water_loop():
    global socketio  # ‚úÖ TH√äM D√íNG N√ÄY
    # ƒê·ªãa ch·ªâ PLC n∆∞·ªõc ƒë∆∞·ª£c c·∫•u h√¨nh qua bi·∫øn m√¥i tr∆∞·ªùng
    water_ip = os.getenv("PLC_WATER_IP", "10.16.40.160")
    client = ModbusTcpClient(water_ip, port=502)
    variables = {
        "DifferentialTotalFlow": 0,
        "ReverseTotalFlow": 4,
        "ForwardFlow": 8,
        "Flow": 16,
        "FlowRate": 20,
    }

    if client.connect():
        print("‚úÖ K·∫øt n·ªëi PLC n∆∞·ªõc th√†nh c√¥ng")
        try:
            while True:
                data = {"timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                for name, offset in variables.items():
                    try:
                        value = read_real_from_offset(client, offset)
                        data[name] = round(value, 1) if value is not None else None
                    except Exception as e:
                        print(f"[MODBUS] L·ªói ƒë·ªçc {name}:", e)
                        data[name] = None


                print("[MODBUS] D·ªØ li·ªáu n∆∞·ªõc:", data)
                if socketio:
                    socketio.emit("water_data", data)

                time.sleep(5)
        except Exception as e:
            print("üõë L·ªói lu·ªìng ƒë·ªçc PLC:", e)
        finally:
            client.close()
    else:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn PLC n∆∞·ªõc")

def start_ats_socketio_listener(socketio_instance):
    global socketio, mqtt_client
    socketio = socketio_instance

    mqtt_client = mqtt.Client()
    mqtt_client.on_message = on_message

    def connect_and_loop():
        while True:
            try:
                mqtt_client.connect(MQTT_BROKER, MQTT_PORT)
                break
            except Exception as e:
                print(f"[MQTT] Cannot connect to {MQTT_BROKER}:{MQTT_PORT}: {e}")
                print("[MQTT] retrying in 5 seconds...")
                time.sleep(5)

        mqtt_client.subscribe("ats/data")
        mqtt_client.subscribe("ats/water")  # üëà Th√™m d√≤ng n√†y
        mqtt_client.loop_forever()

    socketio.sleep(0)  # Gi√∫p Socket.IO kh√¥ng b·ªã ngh·∫Ωn khi d√πng eventlet/gevent
    thread = Thread(target=connect_and_loop)
    thread.daemon = True
    thread.start()
    # üëâ B·∫Øt ƒë·∫ßu lu·ªìng ƒë·ªçc d·ªØ li·ªáu n∆∞·ªõc t·ª´ PLC (Modbus TCP)
    water_thread = Thread(target=read_modbus_water_loop)
    water_thread.daemon = True
    water_thread.start()

